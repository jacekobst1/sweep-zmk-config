// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 15

&lt { quick-tap-ms = <200>; };

&mmv { time-to-max-speed-ms = <600>; };

&sl {
    release-after-ms = <10000>;
    ignore-modifiers;
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        Esc {
            bindings = <&kp ESC>;
            key-positions = <22 23>;
        };

        Del {
            bindings = <&kp DEL>;
            key-positions = <26 27>;
        };

        CapsLock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <11 18>;
        };
    };

    macros {
        ThickArrow: ThickArrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp GT &kp SPACE>;
            label = "THICKARROW";
        };

        ThinArrow: ThinArrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "THINARROW";
        };
    };

    behaviors {
        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <80>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <160>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <80>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q              &kp W             &kp E              &kp R               &kp T        &kp Y        &kp U               &kp I               &kp O              &kp P
&hrm_left LCTRL A  &hrm_left LALT S  &hrm_left LMETA D  &hrm_left LSHIFT F  &kp G        &kp H        &hrm_right LSHFT J  &hrm_right LMETA K  &hrm_right LALT L  &hrm_right LCTRL SEMI
&lt 4 Z            &kp X             &kp C              &kp V               &kp B        &kp N        &kp M               &kp COMMA           &kp DOT            &lt 6 SLASH
                                                        &lt 1 SPACE         &lt 2 TAB    &lt 4 ENTER  &lt 3 BSPC
            >;
        };

        Navigation {
            bindings = <
&kp LG(Q)  &kp LG(W)  &kp LG(E)  &kp LG(R)   &kp LG(T)    &kp LG(LS(Z))  &kp K_PASTE    &kp K_COPY  &kp K_CUT  &kp K_UNDO
&kp LCTRL  &kp LALT   &kp LMETA  &kp LSHIFT  &kp LG(G)    &caps_word     &kp LEFT       &kp DOWN    &kp UP     &kp RIGHT
&kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)   &kp LG(B)    &kp INS        &kp LG(LEFT)   &kp PG_DN   &kp PG_UP  &kp LG(RIGHT)
                                 &trans      &none        &kp ENTER      &kp BACKSPACE
            >;
        };

        AppNavigation {
            bindings = <
&kp LC(LS(LEFT))  &kp LG(N7)  &kp LG(N8)  &kp LG(N9)   &kp LC(LS(RIGHT))    &none    &kp LG(LA(LEFT))  &none         &none         &kp LG(LA(RIGHT))
&kp LC(LEFT)      &kp LG(N4)  &kp LG(N5)  &kp LG(N6)   &kp LC(RIGHT)        &sl 5    &kp LG(LS(LBKT))  &kp LG(LBKT)  &kp LG(RBKT)  &kp LG(LS(RBKT))
&kp LG(GRAVE)     &kp LG(N1)  &kp LG(N2)  &kp LG(N3)   &none                &none    &none             &none         &none         &none
                                          &bootloader  &trans               &kp RET  &kp BSPC
            >;
        };

        Numbers {
            bindings = <
&kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT     &none  &ThickArrow  &none     &ThinArrow  &none
&kp SQT    &kp N4  &kp N5  &kp N6  &kp EQUAL    &none  &kp LSHFT    &kp LGUI  &kp LALT    &kp LCTRL
&kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH     &none  &none        &trans    &trans      &trans
                           &kp N0  &kp MINUS    &none  &trans
            >;
        };

        LeftMouse+Media {
            bindings = <
&none   &kp LG(LEFT_BRACKET)  &mmv MOVE_UP    &kp LG(RIGHT_BRACKET)  &msc SCRL_UP      &none             &none        &none         &none         &none
&none   &mmv MOVE_LEFT        &mmv MOVE_DOWN  &mmv MOVE_RIGHT        &msc SCRL_DOWN    &kp C_MUTE        &kp LSHFT    &kp LGUI      &kp LALT      &kp LCTRL
&trans  &none                 &none           &none                  &mkp MCLK         &kp C_PLAY_PAUSE  &kp C_PREV   &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT
                                              &mkp LCLK              &mkp RCLK         &trans            &bootloader
            >;
        };

        FunctionKeys {
            bindings = <
&kp F12  &kp F7  &kp F8  &kp F9  &none    &none         &none         &none         &none       &none
&kp F11  &kp F4  &kp F5  &kp F6  &none    &to 0         &kp LSHFT     &kp LGUI      &kp LALT    &kp LCTRL
&kp F10  &kp F1  &kp F2  &kp F3  &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &bt BT_CLR_ALL
                         &none   &none    &none         &none
            >;
        };

        RightMouse {
            bindings = <
&none  &none  &none  &none  &none    &msc SCRL_UP    &kp LG(LEFT_BRACKET)  &mmv MOVE_UP    &kp LG(RIGHT_BRACKET)  &none
&none  &none  &none  &none  &none    &msc SCRL_DOWN  &mmv MOVE_LEFT        &mmv MOVE_DOWN  &mmv MOVE_RIGHT        &none
&none  &none  &none  &none  &none    &mkp MCLK       &none                 &none           &none                  &trans
                     &none  &none    &mkp LCLK       &mkp RCLK
            >;
        };
    };
};
